import requests
import telebot
from telebot.types import ReplyKeyboardMarkup
from datetime import datetime, timedelta
import csv
import os
import signal
import sys
from collections import defaultdict
from functools import wraps
from secr import TOKEN

bot_running = True

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_message_count = defaultdict(int)
user_block_time = {}
MESSAGE_LIMIT = 30  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π
TIME_WINDOW = 60    # –∑–∞ 60 —Å–µ–∫—É–Ω–¥
BLOCK_TIME = 300    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global bot_running
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    bot_running = False
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if not os.path.exists('logs'):
    os.makedirs('logs')

CSV_FILE = 'logs/bot_log.csv'
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['Unic ID', '@TG nick', 'Motion', 'API', 'Date', 'Time', 'API answer'])

def check_user_block(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if user_id in user_block_time:
        block_until = user_block_time[user_id]
        if datetime.now() < block_until:
            remaining = (block_until - datetime.now()).seconds
            return True, remaining
        else:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_block_time[user_id]
            user_message_count[user_id] = 0
    return False, 0

def update_user_message_count(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç"""
    current_time = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    is_blocked, remaining = check_user_block(user_id)
    if is_blocked:
        return False, remaining
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_message_count[user_id] += 1
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–∫–Ω–∞
    if user_message_count[user_id] == 1:
        user_block_time[user_id] = current_time + timedelta(seconds=TIME_WINDOW)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if user_message_count[user_id] > MESSAGE_LIMIT:
        block_until = current_time + timedelta(seconds=BLOCK_TIME)
        user_block_time[user_id] = block_until
        remaining = BLOCK_TIME
        return False, remaining
    
    return True, 0

def log_to_csv(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = args[0]
        user_id = message.from_user.id
        username = message.from_user.username or f"{message.from_user.first_name}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allowed, remaining = update_user_message_count(user_id)
        if not allowed:
            bot.send_message(
                message.chat.id,
                f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {remaining} —Å–µ–∫—É–Ω–¥ –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining//60} –º–∏–Ω—É—Ç {remaining%60} —Å–µ–∫—É–Ω–¥."
            )
            return
        
        if hasattr(message, 'text'):
            if message.text.startswith('/'):
                motion = 'Command'
                api_name = 'NONE'
                api_response = 'NONE'
            else:
                motion = 'Keyboard typing'
                api_name = 'NONE'
                api_response = 'NONE'
        else:
            motion = 'Button click'
            api_name = 'NONE'
            api_response = 'NONE'
        
        current_time = datetime.now()
        with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([
                user_id,
                username,
                motion,
                api_name,
                current_time.strftime('%Y-%m-%d'),
                current_time.strftime('%H:%M:%S'),
                api_response
            ])
        
        return func(*args, **kwargs)
    return wrapper

BOT_TOKEN = TOKEN 

bot = telebot.TeleBot(BOT_TOKEN)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.row('üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é')
keyboard.row('üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë')
keyboard.row('üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
keyboard.row('‚ùì –ü–æ–º–æ—â—å')

def get_weather_minsk():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ 7 –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API"""
    try:
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            'latitude': 53.9,
            'longitude': 27.5667,
            'daily': 'weathercode,temperature_2m_max,temperature_2m_min',
            'timezone': 'Europe/Minsk',
            'forecast_days': 7
        }
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'daily' not in data:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ", False
        
        daily = data['daily']
        result = "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–∏–Ω—Å–∫–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        weather_codes = {
            0: "‚òÄÔ∏è –Ø—Å–Ω–æ", 1: "üå§Ô∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ", 2: "‚õÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            3: "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ", 45: "üå´Ô∏è –¢—É–º–∞–Ω", 48: "üå´Ô∏è –ò–Ω–µ–π–Ω—ã–π —Ç—É–º–∞–Ω",
            51: "üåßÔ∏è –õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å", 53: "üåßÔ∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å", 55: "üåßÔ∏è –°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
            61: "üåßÔ∏è –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", 63: "üåßÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", 65: "üåßÔ∏è –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
            80: "üåßÔ∏è –õ–∏–≤–µ–Ω—å", 81: "üåßÔ∏è –°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å", 82: "üåßÔ∏è –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
            95: "‚õàÔ∏è –ì—Ä–æ–∑–∞", 96: "‚õàÔ∏è –ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", 99: "‚õàÔ∏è –°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
        }
        
        for i in range(min(7, len(daily['time']))):
            date = datetime.fromisoformat(daily['time'][i]).strftime('%d.%m.%Y')
            temp_max = daily['temperature_2m_max'][i]
            temp_min = daily['temperature_2m_min'][i]
            weather_code = daily['weathercode'][i]
            
            weather_desc = weather_codes.get(weather_code, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞")
            
            result += f"üìÖ {date}:\n"
            result += f"   üå°Ô∏è {temp_min:.0f}¬∞C - {temp_max:.0f}¬∞C\n"
            result += f"   {weather_desc}\n\n"
        
        return result, True
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}", False

def get_exchange_rates_nbrb():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–ë"""
    try:
        currencies = {
            'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': '–ï–≤—Ä–æ',
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
            'CNY': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
            'KZT': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'
        }
        
        result = "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë:\n\n"
        
        for code, name in currencies.items():
            url = f"https://www.nbrb.by/api/exrates/rates/{code}?parammode=2"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                rate = data['Cur_OfficialRate']
                scale = data['Cur_Scale']
                result += f"üá∫üá≥ {name} ({code}):\n"
                result += f"   üí∞ {scale} {code} = {rate:.4f} BYN\n\n"
            else:
                result += f"üá∫üá≥ {name} ({code}):\n"
                result += f"   ‚ùå –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        result += "üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å"
        return result, True
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}", False

def get_crypto_prices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ USD"""
    try:
        url = "https://api.coingecko.com/api/v3/simple/price"
        params = {
            'ids': 'bitcoin,ethereum,binancecoin,cardano,solana',
            'vs_currencies': 'usd',
            'include_24hr_change': 'true'
        }
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        result = "üìä –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (USD):\n\n"
        
        crypto_names = {
            'bitcoin': '‚Çø Bitcoin',
            'ethereum': 'Œû Ethereum',
            'binancecoin': 'BNB Binance Coin',
            'cardano': 'ADA Cardano',
            'solana': 'SOL Solana'
        }
        
        for crypto_id, info in data.items():
            if crypto_id in crypto_names:
                price = info['usd']
                change = info['usd_24h_change']
                change_icon = 'üìà' if change > 0 else 'üìâ'
                
                result += f"{crypto_names[crypto_id]}:\n"
                result += f"   üí∞ ${price:,.2f}\n"
                result += f"   {change_icon} {change:+.1f}% (24—á)\n\n"
        
        return result, True
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {str(e)}", False

@bot.message_handler(commands=['start'])
@log_to_csv
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –±–æ—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['help'])
@log_to_csv
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:
üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–∏–Ω—Å–∫–µ
üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë - –∫—É—Ä—Å—ã USD, EUR, RUB, CNY, KZT
üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ USD
‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
- –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç
"""
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda message: message.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é")
@log_to_csv
def handle_weather(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–æ–¥—ã"""
    weather_info, success = get_weather_minsk()
    bot.send_message(message.chat.id, weather_info)
    
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name}"
    current_time = datetime.now()
    
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            user_id,
            username,
            'Button click',
            'Weather API',
            current_time.strftime('%Y-%m-%d'),
            current_time.strftime('%H:%M:%S'),
            'Success' if success else 'Error'
        ])

@bot.message_handler(func=lambda message: message.text == "üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë")
@log_to_csv
def handle_exchange(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    exchange_info, success = get_exchange_rates_nbrb()
    bot.send_message(message.chat.id, exchange_info)
    
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name}"
    current_time = datetime.now()
    
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            user_id,
            username,
            'Button click',
            'NBRB Exchange API',
            current_time.strftime('%Y-%m-%d'),
            current_time.strftime('%H:%M:%S'),
            'Success' if success else 'Error'
        ])

@bot.message_handler(func=lambda message: message.text == "üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
@log_to_csv
def handle_crypto(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    crypto_info, success = get_crypto_prices()
    bot.send_message(message.chat.id, crypto_info)
    
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name}"
    current_time = datetime.now()
    
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            user_id,
            username,
            'Button click',
            'Crypto API',
            current_time.strftime('%Y-%m-%d'),
            current_time.strftime('%H:%M:%S'),
            'Success' if success else 'Error'
        ])

@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
@log_to_csv
def handle_help_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    send_help(message)
    
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name}"
    current_time = datetime.now()
    
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            user_id,
            username,
            'Button click',
            'Help Command',
            current_time.strftime('%Y-%m-%d'),
            current_time.strftime('%H:%M:%S'),
            'Success'
        ])

@bot.message_handler(func=lambda message: True)
@log_to_csv
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text
    
    bot.send_message(
        message.chat.id,
        f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ¬´{text}¬ª, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=keyboard
    )
    
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name}"
    current_time = datetime.now()
    
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            user_id,
            username,
            'Keyboard typing',
            'NONE',
            current_time.strftime('%Y-%m-%d'),
            current_time.strftime('%H:%M:%S'),
            'NONE'
        ])

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        try:
            bot_info = bot.get_me()
            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("-" * 50)
        print("–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", CSV_FILE)
        print("‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 30 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 5 –º–∏–Ω –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏")
        print("-" * 50)
        
        bot.infinity_polling(timeout=30, long_polling_timeout=20)
        
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    if not os.path.exists(CSV_FILE):
        print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", CSV_FILE)
    
    try:
        run_bot()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("‚úÖ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")